// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartMonitoring.Server;

#nullable disable

namespace SmartMonitoring.Server.Migrations
{
    [DbContext(typeof(SMContext))]
    [Migration("20231103230702_LogTwoUpdateMigration")]
    partial class LogTwoUpdateMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartMonitoring.Server.Entities.AdminEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.DataBaseEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("DataBases");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.InviteEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("OrganizationID");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.LogEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DataBaseID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<string>("EntityID")
                        .HasColumnType("text");

                    b.Property<string>("EntityJSON")
                        .HasColumnType("text");

                    b.Property<bool>("FixStatus")
                        .HasColumnType("boolean");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("DataBaseID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.OrganizationEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.TelegramUserEntity", b =>
                {
                    b.Property<int>("TelegramID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUseAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MetaInfo")
                        .HasColumnType("text");

                    b.Property<bool>("NotificationStatus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uuid");

                    b.HasKey("TelegramID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("TelegramID")
                        .IsUnique();

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.AdminEntity", b =>
                {
                    b.HasOne("SmartMonitoring.Server.Entities.OrganizationEntity", "Organization")
                        .WithMany("Admins")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.DataBaseEntity", b =>
                {
                    b.HasOne("SmartMonitoring.Server.Entities.OrganizationEntity", "Organization")
                        .WithMany("DataBases")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.InviteEntity", b =>
                {
                    b.HasOne("SmartMonitoring.Server.Entities.OrganizationEntity", "Organization")
                        .WithMany("Invites")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.LogEntity", b =>
                {
                    b.HasOne("SmartMonitoring.Server.Entities.DataBaseEntity", "DataBase")
                        .WithMany()
                        .HasForeignKey("DataBaseID");

                    b.HasOne("SmartMonitoring.Server.Entities.OrganizationEntity", "Organization")
                        .WithMany("Logs")
                        .HasForeignKey("OrganizationID");

                    b.Navigation("DataBase");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.TelegramUserEntity", b =>
                {
                    b.HasOne("SmartMonitoring.Server.Entities.OrganizationEntity", "Organization")
                        .WithMany("TelegramUsers")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SmartMonitoring.Server.Entities.OrganizationEntity", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("DataBases");

                    b.Navigation("Invites");

                    b.Navigation("Logs");

                    b.Navigation("TelegramUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
